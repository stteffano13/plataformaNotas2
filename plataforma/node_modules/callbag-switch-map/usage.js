const pipe = require('callbag-pipe');
const interval = require('callbag-interval');
const fromPromise = require('callbag-from-promise');
const switchMap = require('./index');
const map = require('callbag-map');
const flatten = require('callbag-flatten');
const fromIter = require('callbag-from-iterable');
const forEach = require('callbag-for-each');
const take = require('callbag-take');


const fakeAjax = value => new Promise((resolve, reject) =>{
	let period = value % 2 ? 400 : 1200;
	setTimeout(resolve, period, (value*value));
});


module.exports = fromIter;

console.log('Pullable source');
pipe(
  fromIter('hi'),
  switchMap(char => fromIter([10, 20, 30]), (char,num) => char + num),
  forEach(x => console.log(x))
);



console.log('Listenable source');
pipe(
  interval(500),
  take(5),
  switchMap(i => {
  	if(i < 4) return fromPromise(fakeAjax(i)) 
  	else return pipe(interval(500), take(3))
  }),
  forEach(x => console.log(x))
);

console.log('Listenable source');
pipe(
  interval(500),
  take(5),
  switchMap(i => fromPromise(fakeAjax(i))),
  forEach(x => console.log(x))
);
